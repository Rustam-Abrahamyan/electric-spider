(()=>{"use strict";const t=class{constructor(t,s,i,h,e){this.context=t,this.first=e,this.pos=e?{x:s.x,y:s.y}:{x:s.nextPos.x,y:s.nextPos.y},this.l=i,this.ang=h,this.nextPos={x:this.pos.x+this.l*Math.cos(this.ang),y:this.pos.y+this.l*Math.sin(this.ang)}}show(){this.context.lineTo(this.nextPos.x,this.nextPos.y)}update(t){this.ang=Math.atan2(t.y-this.pos.y,t.x-this.pos.x),this.pos.x=t.x+this.l*Math.cos(this.ang-Math.PI),this.pos.y=t.y+this.l*Math.sin(this.ang-Math.PI),this.nextPos.x=this.pos.x+this.l*Math.cos(this.ang),this.nextPos.y=this.pos.y+this.l*Math.sin(this.ang)}fallback(t){this.pos.x=t.x,this.pos.y=t.y,this.nextPos.x=this.pos.x+this.l*Math.cos(this.ang),this.nextPos.y=this.pos.y+this.l*Math.sin(this.ang)}},s=(t,s,i,h)=>Math.sqrt(Math.pow(i-t,2)+Math.pow(h-s,2)),i=class{constructor(s,i,h,e,n){this.context=s,this.x=i,this.y=h,this.l=e,this.n=n,this.t={},this.rand=Math.random(),this.segments=[new t(s,this,this.l/this.n,0,!0)];for(let i=1;i<this.n;i++)this.segments.push(new t(s,this.segments[i-1],this.l/this.n,0,!1))}move(t,i){this.angle=Math.atan2(i.y-this.y,i.x-this.x),this.dt=s(t.x,t.y,i.x,i.y)+5,this.t={x:i.x-.8*this.dt*Math.cos(this.angle),y:i.y-.8*this.dt*Math.sin(this.angle)},this.t.x?this.segments[this.n-1].update(this.t):this.segments[this.n-1].update(i);for(let t=this.n-2;t>=0;t--)this.segments[t].update(this.segments[t+1].pos);if(s(this.x,this.y,i.x,i.y)<=this.l+s(t.x,t.y,i.x,i.y)){this.segments[0].fallback({x:this.x,y:this.y});for(let t=1;t<this.n;t++)this.segments[t].fallback(this.segments[t-1].nextPos)}}show(t){const i="hsl("+(60*this.rand+180)+",100%,"+(60*this.rand+25)+"%)";if(s(this.x,this.y,t.x,t.y)<=this.l){this.context.globalCompositeOperation="lighter",this.context.beginPath(),this.context.lineTo(this.x,this.y);for(let t=0;t<this.n;t++)this.segments[t].show();this.context.strokeStyle=i,this.context.lineWidth=2*this.rand,this.context.lineCap="round",this.context.lineJoin="round",this.context.stroke(),this.context.globalCompositeOperation="source-over"}}showPoints(t){this.context.beginPath(),s(this.x,this.y,t.x,t.y)<=this.l?(this.context.arc(this.x,this.y,2*this.rand+1,0,2*Math.PI),this.context.fillStyle="rgb(255, 255, 255)"):(this.context.arc(this.x,this.y,2*this.rand,0,2*Math.PI),this.context.fillStyle="rgb(100, 100, 100)"),this.context.fill()}};window.onload=()=>{const t=document.getElementById("canvas"),h=t.getContext("2d");t.width=window.innerWidth,t.height=window.innerHeight,h.fillRect(0,0,t.width,t.height);const e={x:!1,y:!1},n=[],o={x:0,y:0},a={};let x=0;for(let s=0;s<500;s++)n.push(new i(h,Math.random()*t.width,Math.random()*t.height,200*Math.random()+50,50));const l=()=>{var i;i=l,(window.requestAnimationFrame||window.mozRequestAnimationFrame||window.webkitRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return setTimeout(t,1e3/60)})(i),h.clearRect(0,0,t.width,t.height),(()=>{const{width:i,height:l}=t;let r,y;e.x?(r=e.x-o.x,y=e.y-o.y):(r=i/2+(l/2-10)*Math.sqrt(2)*Math.cos(x)/(Math.pow(Math.sin(x),2)+1)-o.x,y=l/2+(l/2-10)*Math.sqrt(2)*Math.cos(x)*Math.sin(x)/(Math.pow(Math.sin(x),2)+1)-o.y),o.x+=r/10,o.y+=y/10,x+=.01,h.beginPath(),h.arc(o.x,o.y,s(a.x,a.y,o.x,o.y)+5,0,2*Math.PI),h.fillStyle="rgb(153, 204, 255)",h.fill();for(let t=0;t<500;t++)n[t].move(a,o),n[t].showPoints(o);for(let t=0;t<500;t++)n[t].show(o);a.x=o.x,a.y=o.y})()};t.addEventListener("mousemove",(s=>{e.x=s.pageX-t.offsetLeft,e.y=s.pageY-t.offsetTop}),!1),t.addEventListener("mouseleave",(()=>{e.x=!1,e.y=!1})),window.addEventListener("resize",(()=>{t.width,window.innerWidth,t.height,window.innerHeight})),l()}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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N0g2QixFQUFPOUIsR0FBS3FFLEVBQVUsR0FDdEJ2QyxFQUFPN0IsR0FBS3FFLEVBQVUsR0FFdEI1RCxHQUFLLElBRUxqQixFQUFRMEMsWUFDUjFDLEVBQVFpRCxJQUFJWixFQUFPOUIsRUFBRzhCLEVBQU83QixFQUFHYSxFQUFLNEMsRUFBVzFELEVBQUcwRCxFQUFXekQsRUFBRzZCLEVBQU85QixFQUFHOEIsRUFBTzdCLEdBQUssRUFBRyxFQUFHLEVBQUlHLEtBQUtRLElBQ3RHbkIsRUFBUWtELFVBQVkscUJBQ3BCbEQsRUFBUW1ELE9BRVIsSUFBSyxJQUFJbEIsRUFBSSxFQUFHQSxFQTVDQSxJQTRDaUJBLElBQzdCK0IsRUFBVS9CLEdBQUdFLEtBQUs4QixFQUFZNUIsR0FDOUIyQixFQUFVL0IsR0FBR2UsV0FBV1gsR0FHNUIsSUFBSyxJQUFJSixFQUFJLEVBQUdBLEVBakRBLElBaURpQkEsSUFDN0IrQixFQUFVL0IsR0FBR25CLEtBQUt1QixHQUd0QjRCLEVBQVcxRCxFQUFJOEIsRUFBTzlCLEVBQ3RCMEQsRUFBV3pELEVBQUk2QixFQUFPN0IsQ0FBQyxFQVF2QnNFLEVBQU0sRUFHVnhCLEVBQU95QixpQkFDSCxhQUNDQyxJQUNHakIsRUFBTXhELEVBQUl5RSxFQUFFQyxNQUFRM0IsRUFBTzRCLFdBQzNCbkIsRUFBTXZELEVBQUl3RSxFQUFFRyxNQUFRN0IsRUFBTzhCLFNBQVMsSUFFeEMsR0FHSjlCLEVBQU95QixpQkFBaUIsY0FBYyxLQUNsQ2hCLEVBQU14RCxHQUFJLEVBQ1Z3RCxFQUFNdkQsR0FBSSxDQUFLLElBR25CNEMsT0FBTzJCLGlCQUFpQixVQUFVLEtBQzlCekIsRUFBT0ksTUFBUU4sT0FBT08sV0FDdEJMLEVBQU9NLE9BQVNSLE9BQU9TLFdBQVcsSUFHdENNLEdBQVMsQyIsInNvdXJjZXMiOlsid2VicGFjazovL2VsZWN0cmljLXNwaWRlci8uL3NyYy9zZWdtZW50LmpzIiwid2VicGFjazovL2VsZWN0cmljLXNwaWRlci8uL3NyYy91dGlscy5qcyIsIndlYnBhY2s6Ly9lbGVjdHJpYy1zcGlkZXIvLi9zcmMvdGVudGFjbGUuanMiLCJ3ZWJwYWNrOi8vZWxlY3RyaWMtc3BpZGVyLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbImNsYXNzIFNlZ21lbnQge1xyXG4gICAgY29uc3RydWN0b3IoY29udGV4dCwgcGFyZW50LCBsLCBhLCBmaXJzdCkge1xyXG4gICAgICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XHJcbiAgICAgICAgdGhpcy5maXJzdCA9IGZpcnN0O1xyXG5cclxuICAgICAgICBpZiAoZmlyc3QpIHtcclxuICAgICAgICAgICAgdGhpcy5wb3MgPSB7XHJcbiAgICAgICAgICAgICAgICB4OiBwYXJlbnQueCxcclxuICAgICAgICAgICAgICAgIHk6IHBhcmVudC55LFxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMucG9zID0ge1xyXG4gICAgICAgICAgICAgICAgeDogcGFyZW50Lm5leHRQb3MueCxcclxuICAgICAgICAgICAgICAgIHk6IHBhcmVudC5uZXh0UG9zLnksXHJcbiAgICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmwgPSBsO1xyXG4gICAgICAgIHRoaXMuYW5nID0gYTtcclxuXHJcbiAgICAgICAgdGhpcy5uZXh0UG9zID0ge1xyXG4gICAgICAgICAgICB4OiB0aGlzLnBvcy54ICsgdGhpcy5sICogTWF0aC5jb3ModGhpcy5hbmcpLFxyXG4gICAgICAgICAgICB5OiB0aGlzLnBvcy55ICsgdGhpcy5sICogTWF0aC5zaW4odGhpcy5hbmcpLFxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcblxyXG4gICAgc2hvdygpIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQubGluZVRvKHRoaXMubmV4dFBvcy54LCB0aGlzLm5leHRQb3MueSk7XHJcbiAgICB9XHJcblxyXG4gICAgdXBkYXRlKHQpIHtcclxuICAgICAgICB0aGlzLmFuZyA9IE1hdGguYXRhbjIodC55IC0gdGhpcy5wb3MueSwgdC54IC0gdGhpcy5wb3MueCk7XHJcbiAgICAgICAgdGhpcy5wb3MueCA9IHQueCArIHRoaXMubCAqIE1hdGguY29zKHRoaXMuYW5nIC0gTWF0aC5QSSk7XHJcbiAgICAgICAgdGhpcy5wb3MueSA9IHQueSArIHRoaXMubCAqIE1hdGguc2luKHRoaXMuYW5nIC0gTWF0aC5QSSk7XHJcbiAgICAgICAgdGhpcy5uZXh0UG9zLnggPSB0aGlzLnBvcy54ICsgdGhpcy5sICogTWF0aC5jb3ModGhpcy5hbmcpO1xyXG4gICAgICAgIHRoaXMubmV4dFBvcy55ID0gdGhpcy5wb3MueSArIHRoaXMubCAqIE1hdGguc2luKHRoaXMuYW5nKTtcclxuICAgIH1cclxuXHJcbiAgICBmYWxsYmFjayh0KSB7XHJcbiAgICAgICAgdGhpcy5wb3MueCA9IHQueDtcclxuICAgICAgICB0aGlzLnBvcy55ID0gdC55O1xyXG4gICAgICAgIHRoaXMubmV4dFBvcy54ID0gdGhpcy5wb3MueCArIHRoaXMubCAqIE1hdGguY29zKHRoaXMuYW5nKTtcclxuICAgICAgICB0aGlzLm5leHRQb3MueSA9IHRoaXMucG9zLnkgKyB0aGlzLmwgKiBNYXRoLnNpbih0aGlzLmFuZyk7XHJcbiAgICB9XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IFNlZ21lbnQ7XHJcbiIsImV4cG9ydCBjb25zdCByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgPSAoY2FsbGJhY2spID0+IHtcclxuICAgIGNvbnN0IGZwcyA9IDYwO1xyXG4gICAgY29uc3QgcmVxdWVzdEFuaW1hdGlvbkZyYW1lRm4gPVxyXG4gICAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcclxuICAgICAgICB3aW5kb3cubW96UmVxdWVzdEFuaW1hdGlvbkZyYW1lIHx8XHJcbiAgICAgICAgd2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgIHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxyXG4gICAgICAgIGZ1bmN0aW9uIChmKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGYsIDEwMDAgLyBmcHMpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgcmV0dXJuIHJlcXVlc3RBbmltYXRpb25GcmFtZUZuKGNhbGxiYWNrKTtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBkaXN0ID0gKHAxeCwgcDF5LCBwMngsIHAyeSkgPT4ge1xyXG4gICAgcmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhwMnggLSBwMXgsIDIpICsgTWF0aC5wb3cocDJ5IC0gcDF5LCAyKSk7XHJcbn07IiwiaW1wb3J0IFNlZ21lbnQgZnJvbSBcIi4vc2VnbWVudFwiO1xyXG5pbXBvcnQgeyBkaXN0IH0gZnJvbSBcIi4vdXRpbHNcIjtcclxuXHJcbmNsYXNzIFRlbnRhY2xlIHtcclxuICAgIGNvbnN0cnVjdG9yKGNvbnRleHQsIHgsIHksIGwsIG4pIHtcclxuICAgICAgICB0aGlzLmNvbnRleHQgPSBjb250ZXh0O1xyXG4gICAgICAgIHRoaXMueCA9IHg7XHJcbiAgICAgICAgdGhpcy55ID0geTtcclxuICAgICAgICB0aGlzLmwgPSBsO1xyXG4gICAgICAgIHRoaXMubiA9IG47XHJcbiAgICAgICAgdGhpcy50ID0ge307XHJcbiAgICAgICAgdGhpcy5yYW5kID0gTWF0aC5yYW5kb20oKTtcclxuICAgICAgICB0aGlzLnNlZ21lbnRzID0gW25ldyBTZWdtZW50KGNvbnRleHQsIHRoaXMsIHRoaXMubCAvIHRoaXMubiwgMCwgdHJ1ZSldO1xyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMubjsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VnbWVudHMucHVzaChuZXcgU2VnbWVudChjb250ZXh0LCB0aGlzLnNlZ21lbnRzW2kgLSAxXSwgdGhpcy5sIC8gdGhpcy5uLCAwLCBmYWxzZSkpO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBtb3ZlKGxhc3RfdGFyZ2V0LCB0YXJnZXQpIHtcclxuICAgICAgICB0aGlzLmFuZ2xlID0gTWF0aC5hdGFuMih0YXJnZXQueSAtIHRoaXMueSwgdGFyZ2V0LnggLSB0aGlzLngpO1xyXG4gICAgICAgIHRoaXMuZHQgPSBkaXN0KGxhc3RfdGFyZ2V0LngsIGxhc3RfdGFyZ2V0LnksIHRhcmdldC54LCB0YXJnZXQueSkgKyA1O1xyXG4gICAgICAgIHRoaXMudCA9IHtcclxuICAgICAgICAgICAgeDogdGFyZ2V0LnggLSAwLjggKiB0aGlzLmR0ICogTWF0aC5jb3ModGhpcy5hbmdsZSksXHJcbiAgICAgICAgICAgIHk6IHRhcmdldC55IC0gMC44ICogdGhpcy5kdCAqIE1hdGguc2luKHRoaXMuYW5nbGUpLFxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIGlmICh0aGlzLnQueCkge1xyXG4gICAgICAgICAgICB0aGlzLnNlZ21lbnRzW3RoaXMubiAtIDFdLnVwZGF0ZSh0aGlzLnQpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuc2VnbWVudHNbdGhpcy5uIC0gMV0udXBkYXRlKHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gdGhpcy5uIC0gMjsgaSA+PSAwOyBpLS0pIHtcclxuICAgICAgICAgICAgdGhpcy5zZWdtZW50c1tpXS51cGRhdGUodGhpcy5zZWdtZW50c1tpICsgMV0ucG9zKTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGlmIChkaXN0KHRoaXMueCwgdGhpcy55LCB0YXJnZXQueCwgdGFyZ2V0LnkpIDw9IHRoaXMubCArIGRpc3QobGFzdF90YXJnZXQueCwgbGFzdF90YXJnZXQueSwgdGFyZ2V0LngsIHRhcmdldC55KSkge1xyXG4gICAgICAgICAgICB0aGlzLnNlZ21lbnRzWzBdLmZhbGxiYWNrKHsgeDogdGhpcy54LCB5OiB0aGlzLnkgfSk7XHJcblxyXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMTsgaSA8IHRoaXMubjsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnNlZ21lbnRzW2ldLmZhbGxiYWNrKHRoaXMuc2VnbWVudHNbaSAtIDFdLm5leHRQb3MpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHNob3codGFyZ2V0KSB7XHJcbiAgICAgICAgY29uc3QgY29sb3IgPSBcImhzbChcIiArICh0aGlzLnJhbmQgKiA2MCArIDE4MCkgKyBcIiwxMDAlLFwiICsgKHRoaXMucmFuZCAqIDYwICsgMjUpICsgXCIlKVwiO1xyXG5cclxuICAgICAgICBpZiAoZGlzdCh0aGlzLngsIHRoaXMueSwgdGFyZ2V0LngsIHRhcmdldC55KSA8PSB0aGlzLmwpIHtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0Lmdsb2JhbENvbXBvc2l0ZU9wZXJhdGlvbiA9IFwibGlnaHRlclwiO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5saW5lVG8odGhpcy54LCB0aGlzLnkpO1xyXG5cclxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLm47IGkrKykge1xyXG4gICAgICAgICAgICAgICAgdGhpcy5zZWdtZW50c1tpXS5zaG93KCk7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5zdHJva2VTdHlsZSA9IGNvbG9yO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQubGluZVdpZHRoID0gdGhpcy5yYW5kICogMjtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmxpbmVDYXAgPSBcInJvdW5kXCI7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5saW5lSm9pbiA9IFwicm91bmRcIjtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LnN0cm9rZSgpO1xyXG4gICAgICAgICAgICB0aGlzLmNvbnRleHQuZ2xvYmFsQ29tcG9zaXRlT3BlcmF0aW9uID0gXCJzb3VyY2Utb3ZlclwiO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBzaG93UG9pbnRzKHRhcmdldCkge1xyXG4gICAgICAgIHRoaXMuY29udGV4dC5iZWdpblBhdGgoKTtcclxuXHJcbiAgICAgICAgaWYgKGRpc3QodGhpcy54LCB0aGlzLnksIHRhcmdldC54LCB0YXJnZXQueSkgPD0gdGhpcy5sKSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5hcmModGhpcy54LCB0aGlzLnksIDIgKiB0aGlzLnJhbmQgKyAxLCAwLCAyICogTWF0aC5QSSk7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5maWxsU3R5bGUgPSBcInJnYigyNTUsIDI1NSwgMjU1KVwiO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMuY29udGV4dC5hcmModGhpcy54LCB0aGlzLnksIHRoaXMucmFuZCAqIDIsIDAsIDIgKiBNYXRoLlBJKTtcclxuICAgICAgICAgICAgdGhpcy5jb250ZXh0LmZpbGxTdHlsZSA9IFwicmdiKDEwMCwgMTAwLCAxMDApXCI7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0aGlzLmNvbnRleHQuZmlsbCgpO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUZW50YWNsZTtcclxuIiwiaW1wb3J0IFRlbnRhY2xlIGZyb20gXCIuL3RlbnRhY2xlXCI7XHJcbmltcG9ydCB7IHJlcXVlc3RBbmltYXRpb25GcmFtZSwgZGlzdCB9IGZyb20gXCIuL3V0aWxzXCI7XHJcblxyXG53aW5kb3cub25sb2FkID0gKCkgPT4ge1xyXG4gICAgY29uc3QgY2FudmFzID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJjYW52YXNcIik7XHJcbiAgICBjb25zdCBjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKTtcclxuXHJcbiAgICBjYW52YXMud2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgIGNhbnZhcy5oZWlnaHQgPSB3aW5kb3cuaW5uZXJIZWlnaHQ7XHJcblxyXG4gICAgY29udGV4dC5maWxsUmVjdCgwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQpO1xyXG5cclxuICAgIGNvbnN0IG1vdXNlID0geyB4OiBmYWxzZSwgeTogZmFsc2UgfTtcclxuXHJcbiAgICBjb25zdCBtYXhUZW50YWNsZUxlbmd0aCA9IDI1MDtcclxuICAgIGNvbnN0IG1pblRlbnRhY2xlTGVuZ3RoID0gNTA7XHJcbiAgICBjb25zdCBwb2ludHNDb3VudCA9IDUwMDtcclxuICAgIGNvbnN0IG4gPSA1MDtcclxuICAgIGNvbnN0IHRlbnRhY2xlcyA9IFtdO1xyXG4gICAgY29uc3QgdGFyZ2V0ID0geyB4OiAwLCB5OiAwIH07XHJcbiAgICBjb25zdCBsYXN0VGFyZ2V0ID0ge307XHJcbiAgICBjb25zdCBxID0gMTA7XHJcblxyXG4gICAgbGV0IHQgPSAwO1xyXG5cclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9pbnRzQ291bnQ7IGkrKykge1xyXG4gICAgICAgIHRlbnRhY2xlcy5wdXNoKFxyXG4gICAgICAgICAgICBuZXcgVGVudGFjbGUoXHJcbiAgICAgICAgICAgICAgICBjb250ZXh0LFxyXG4gICAgICAgICAgICAgICAgTWF0aC5yYW5kb20oKSAqIGNhbnZhcy53aWR0aCxcclxuICAgICAgICAgICAgICAgIE1hdGgucmFuZG9tKCkgKiBjYW52YXMuaGVpZ2h0LFxyXG4gICAgICAgICAgICAgICAgTWF0aC5yYW5kb20oKSAqIChtYXhUZW50YWNsZUxlbmd0aCAtIG1pblRlbnRhY2xlTGVuZ3RoKSArIG1pblRlbnRhY2xlTGVuZ3RoLFxyXG4gICAgICAgICAgICAgICAgblxyXG4gICAgICAgICAgICApXHJcbiAgICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBkcmF3ID0gKCkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gY2FudmFzO1xyXG4gICAgICAgIGxldCB0YXJnZXRYLCB0YXJnZXRZO1xyXG5cclxuICAgICAgICBpZiAobW91c2UueCkge1xyXG4gICAgICAgICAgICB0YXJnZXRYID0gbW91c2UueCAtIHRhcmdldC54O1xyXG4gICAgICAgICAgICB0YXJnZXRZID0gbW91c2UueSAtIHRhcmdldC55O1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRhcmdldFggPSB3aWR0aCAvIDIgKyAoKGhlaWdodCAvIDIgLSBxKSAqIE1hdGguc3FydCgyKSAqIE1hdGguY29zKHQpKSAvIChNYXRoLnBvdyhNYXRoLnNpbih0KSwgMikgKyAxKSAtIHRhcmdldC54O1xyXG4gICAgICAgICAgICB0YXJnZXRZID1cclxuICAgICAgICAgICAgICAgIGhlaWdodCAvIDIgKyAoKGhlaWdodCAvIDIgLSBxKSAqIE1hdGguc3FydCgyKSAqIE1hdGguY29zKHQpICogTWF0aC5zaW4odCkpIC8gKE1hdGgucG93KE1hdGguc2luKHQpLCAyKSArIDEpIC0gdGFyZ2V0Lnk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICB0YXJnZXQueCArPSB0YXJnZXRYIC8gMTA7XHJcbiAgICAgICAgdGFyZ2V0LnkgKz0gdGFyZ2V0WSAvIDEwO1xyXG5cclxuICAgICAgICB0ICs9IDAuMDE7XHJcblxyXG4gICAgICAgIGNvbnRleHQuYmVnaW5QYXRoKCk7XHJcbiAgICAgICAgY29udGV4dC5hcmModGFyZ2V0LngsIHRhcmdldC55LCBkaXN0KGxhc3RUYXJnZXQueCwgbGFzdFRhcmdldC55LCB0YXJnZXQueCwgdGFyZ2V0LnkpICsgNSwgMCwgMiAqIE1hdGguUEkpO1xyXG4gICAgICAgIGNvbnRleHQuZmlsbFN0eWxlID0gXCJyZ2IoMTUzLCAyMDQsIDI1NSlcIjtcclxuICAgICAgICBjb250ZXh0LmZpbGwoKTtcclxuXHJcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHNDb3VudDsgaSsrKSB7XHJcbiAgICAgICAgICAgIHRlbnRhY2xlc1tpXS5tb3ZlKGxhc3RUYXJnZXQsIHRhcmdldCk7XHJcbiAgICAgICAgICAgIHRlbnRhY2xlc1tpXS5zaG93UG9pbnRzKHRhcmdldCk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBvaW50c0NvdW50OyBpKyspIHtcclxuICAgICAgICAgICAgdGVudGFjbGVzW2ldLnNob3codGFyZ2V0KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGxhc3RUYXJnZXQueCA9IHRhcmdldC54O1xyXG4gICAgICAgIGxhc3RUYXJnZXQueSA9IHRhcmdldC55O1xyXG4gICAgfTtcclxuXHJcbiAgICBjb25zdCBhbmltYXRlID0gKCkgPT4ge1xyXG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShhbmltYXRlKTtcclxuXHJcbiAgICAgICAgY29udGV4dC5jbGVhclJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcclxuXHJcbiAgICAgICAgZHJhdygpO1xyXG4gICAgfTtcclxuXHJcbiAgICBjYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICBcIm1vdXNlbW92ZVwiLFxyXG4gICAgICAgIChlKSA9PiB7XHJcbiAgICAgICAgICAgIG1vdXNlLnggPSBlLnBhZ2VYIC0gY2FudmFzLm9mZnNldExlZnQ7XHJcbiAgICAgICAgICAgIG1vdXNlLnkgPSBlLnBhZ2VZIC0gY2FudmFzLm9mZnNldFRvcDtcclxuICAgICAgICB9LFxyXG4gICAgICAgIGZhbHNlXHJcbiAgICApO1xyXG5cclxuICAgIGNhbnZhcy5hZGRFdmVudExpc3RlbmVyKFwibW91c2VsZWF2ZVwiLCAoKSA9PiB7XHJcbiAgICAgICAgbW91c2UueCA9IGZhbHNlO1xyXG4gICAgICAgIG1vdXNlLnkgPSBmYWxzZTtcclxuICAgIH0pO1xyXG5cclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKFwicmVzaXplXCIsICgpID0+IHtcclxuICAgICAgICBjYW52YXMud2lkdGggLSB3aW5kb3cuaW5uZXJXaWR0aDtcclxuICAgICAgICBjYW52YXMuaGVpZ2h0IC0gd2luZG93LmlubmVySGVpZ2h0O1xyXG4gICAgfSk7XHJcblxyXG4gICAgYW5pbWF0ZSgpO1xyXG59O1xyXG4iXSwibmFtZXMiOlsiY29uc3RydWN0b3IiLCJjb250ZXh0IiwicGFyZW50IiwibCIsImEiLCJmaXJzdCIsInRoaXMiLCJwb3MiLCJ4IiwieSIsIm5leHRQb3MiLCJhbmciLCJNYXRoIiwiY29zIiwic2luIiwic2hvdyIsImxpbmVUbyIsInVwZGF0ZSIsInQiLCJhdGFuMiIsIlBJIiwiZmFsbGJhY2siLCJkaXN0IiwicDF4IiwicDF5IiwicDJ4IiwicDJ5Iiwic3FydCIsInBvdyIsIm4iLCJyYW5kIiwicmFuZG9tIiwic2VnbWVudHMiLCJTZWdtZW50IiwiaSIsInB1c2giLCJtb3ZlIiwibGFzdF90YXJnZXQiLCJ0YXJnZXQiLCJhbmdsZSIsImR0IiwiY29sb3IiLCJnbG9iYWxDb21wb3NpdGVPcGVyYXRpb24iLCJiZWdpblBhdGgiLCJzdHJva2VTdHlsZSIsImxpbmVXaWR0aCIsImxpbmVDYXAiLCJsaW5lSm9pbiIsInN0cm9rZSIsInNob3dQb2ludHMiLCJhcmMiLCJmaWxsU3R5bGUiLCJmaWxsIiwid2luZG93Iiwib25sb2FkIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsImdldENvbnRleHQiLCJ3aWR0aCIsImlubmVyV2lkdGgiLCJoZWlnaHQiLCJpbm5lckhlaWdodCIsImZpbGxSZWN0IiwibW91c2UiLCJ0ZW50YWNsZXMiLCJsYXN0VGFyZ2V0IiwiVGVudGFjbGUiLCJhbmltYXRlIiwiY2FsbGJhY2siLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtc1JlcXVlc3RBbmltYXRpb25GcmFtZSIsImYiLCJzZXRUaW1lb3V0IiwiY2xlYXJSZWN0IiwidGFyZ2V0WCIsInRhcmdldFkiLCJkcmF3IiwiYWRkRXZlbnRMaXN0ZW5lciIsImUiLCJwYWdlWCIsIm9mZnNldExlZnQiLCJwYWdlWSIsIm9mZnNldFRvcCJdLCJzb3VyY2VSb290IjoiIn0=